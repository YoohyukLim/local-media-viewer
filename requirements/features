# 기능 요구사항

## 1. 비디오 관리
- [x] 설정된 디렉토리의 비디오 파일 자동 스캔
- [x] 비디오 메타데이터 추출 (길이, 수정 시간)
- [x] 디렉토리 기반 자동 태그 생성
- [x] 시스템 기본 플레이어로 비디오 실행

## 2. 썸네일 시스템
- [x] WebP 애니메이션 썸네일 자동 생성
- [x] 썸네일 로딩/에러 상태 표시
- [x] 썸네일 클릭으로 비디오 실행
- [x] 파일 존재 여부 확인

## 3. 웹 인터페이스
- [x] 반응형 그리드 레이아웃 (5열)
- [x] 페이지네이션 (최대 5개 페이지 번호)
- [x] 비디오 카드 (썸네일, 제목, 길이, 태그)
- [x] 로딩 상태 표시

## 4. API 엔드포인트
- [x] GET /api/videos/list
- [x] GET /api/videos/thumbnails/{id}
- [x] POST /api/videos/play/{id}
- [x] GET /api/videos/tags
- [x] POST /api/videos/{id}/tags
- [x] DELETE /api/videos/{id}/tags/{tagId}

## 5. 시스템 통합
- [x] CORS 및 프록시 설정
- [x] 에러 처리 및 로깅
- [x] 플랫폼별 비디오 실행 (Windows/macOS/Linux)
- [x] 안전한 종료 처리

## 6. 멀티프로세싱
- [x] ProcessPoolExecutor로 병렬 처리
- [x] 워커 수 설정 가능 (config.yaml의 max_workers)
- [x] spawn 컨텍스트 사용으로 안정성 확보
- [x] KeyboardInterrupt 무시 처리

## 7. 로깅 시스템
- [x] 싱글톤 패턴의 LogManager
- [x] 큐 기반 스레드 안전 로깅
- [x] 콘솔 출력 포맷팅
- [x] 안전한 종료 처리

## 8. 프로세스 관리
- [x] 시그널 핸들러 (SIGINT, SIGTERM)
- [x] 리소스 정리 순서 최적화
- [x] 중복 종료 방지
- [x] 진행 중인 작업 안전한 취소

## 9. 에러 처리
- [x] 각 단계별 예외 처리
- [x] 임시 파일 자동 정리
- [x] 로깅 시스템 종료 시 예외 처리
- [x] 스레드/프로세스 동기화

## 10. 메타데이터 관리
- [x] 카테고리: .info 파일의 ! 시작 라인
- [x] 태그: .info 파일의 # 시작 라인
- [x] 태그 자동 생성 및 연결
- [x] 사용되지 않는 태그 자동 정리

## 11. 자동화
- [x] 서버 시작 시 자동 스캔
- [x] 설정 파일 변경 시 자동 리로드
- [x] 스캔 시 자동 정리 작업
  - [x] 누락된 파일 제거
  - [x] 외부 파일 제거
  - [x] 사용되지 않는 태그 제거

## 12. 서버 설정
- [x] 커맨드라인 인자로 호스트/포트 지정
- [x] 기본값: localhost:8000
- [x] 자동 리로드 지원 